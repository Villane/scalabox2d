package org.villane.box2d.dynamics.controllers

import vecmath._
import vecmath.Preamble._

import collection.Set

/**
 * Base trait for controllers.
 * Controllers are a convience for encapsulating common per-step functionality.
 */
trait Controller {

  /** The list of bodies that this controller applies to. */
  def bodies: Set[Body]

  /** This is called on each world step after updating contacts. */
  def step(step: TimeStep)

  /** Iterate over awake bodies. */
  protected def forAwakeBodies(f: Body => Unit) =
    for (body <- bodies) if (!body.isSleeping) f(body)

}

/**
 * Controllers should mix this in if they don't have their own body list but
 * want to rely on contacts generated by 
 */
trait SensorManagedBodies extends Controller {

  // TODO make this immutable when Scala supports trait params
  private[this] var _sensor: Body = null
  /**
   * The sensor body that owns this controller. If the sensor is destoryed,
   * the controller is destroyed too.
   */
  def sensor = _sensor
  def sensor_=(body: Body) = {
    if (_sensor != null) _sensor.dependentControllers -= this
    _sensor = body
    if (_sensor != null) _sensor.dependentControllers += this
  }

  def bodies: Set[Body] =
    if (_sensor == null)
      Set()
    else
      Set() ++ _sensor.contactList filter (!_.contact.manifolds.isEmpty) map (_.other)

}

/**
 * Controllers should mix this in if they manage their own list of bodies.
 */
trait SelfManagedBodies extends Controller {

  private[this] val _bodies = collection.mutable.Set[Body]()

  def bodies: Set[Body] = _bodies

  def addBody(body: Body) = {
    _bodies += body
    body.managingControllers += this
  }

  def removeBody(body: Body) = {
    _bodies -= body
    body.managingControllers -= this
  }

}
